package com.coderlucifar.leetcode.week08.backtracking.midium;import java.util.ArrayList;import java.util.List;/** *  leetcode216： *      组合总和III（中等）   选出k个数相加为给定和，没有重复数据，只能使用一次 * */public class Leetcode216 {    class Solution {        private List<List<Integer>> result = new ArrayList<>();        // 阶段        private int stage = 0;        // 路径        private List<Integer> path = new ArrayList<>();        // 路径和        private int pathSum = 0;        public List<List<Integer>> combinationSum3(int k, int n) {            trace(k, n, 1);            return this.result;        }        private void trace(int k, int n, int start) {            if (stage == k && pathSum == n) {                this.result.add(new ArrayList<>(this.path));                return;            }            for (int i = start; i <= 9; i++) {                path.add(i);                stage++;                pathSum += i;                if (pathSum > n) {                    pathSum -= i;                    stage--;                    path.remove(stage);                }                trace(k, n, i+1);                pathSum -= i;                stage--;                path.remove(stage);            }            return;        }    }}